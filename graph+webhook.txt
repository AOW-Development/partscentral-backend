
i want to receive meta leads in my dashboard so please create respective endpoints / apis .

meta sends a  real time POST req. (webhook) to backend.this payload includes basic like (leadgen_id or form_id and page_id) but not the full payload.
backend calls meta's graph api using leadgen_id  (with page access token) to get the full payload .
pareses the lead data and stores in mysql .
emits and socket.io event  to connected  admin dashboard frontend , which triggers a refresh or real-time update.
Next.js fetches leads and displays them .  

add in env : META_PAGE_ACCESS_TOKEN and META_VERIFY_TOKEN 

create table leads with 
id @id defailt incrementing 
lead_id
form_id
created_at
data json


1. need to generate USER_ACCESS_TOKEN with (pages_manage_metadata,leads_retrieval,pages_show_list,ads_management)
2. get PAGE_ACCESS_TOKEN  to list pages and then use the access_token for page.
3. subscibe to webhook by exposing a public https endpoint.

add in env variable add : PAGE_ACCESS_TOKEN=long-lived-token

implement following :

1) webhook endpoing : verfiy GET req from meta and process POST payload .
2) API endpoing for nextjs to GET leads from db.



GET /webhook: Handles Meta's verification challenge. Meta calls this once during setup. If it matches your VERIFY_TOKEN, respond with the challenge string.

POST /webhook: Receives notifications. Checks if it's a page leadgen event, extracts leadgen_id, fetches full data (e.g., {"id": "...", "created_time": "...", "field_data": [{"name": "full_name", "values": ["John Doe"]}, ...]}).

Graph API Call: Uses fetch to GET lead details. Requires PAGE_ACCESS_TOKEN with leads_retrieval.

MySQL Insert: Stores as JSON for flexibility (parse later in dashboard).

Socket.IO Emit: Broadcasts 'new-lead' event to  connected client.

/api/leads: Simple GET to query DB for dashboard.
 
fetchLeads: Calls Express API to get leads, parses JSON data.

Socket.IO Client: Connects to Express, listens for 'new-lead', triggers refresh.

Renders leads in a list (customize as needed, e.g., table).

find controller,service,routes files created and use them to write backend at :

autosq-3/backend/partscentral-db/src/controllers/leadController.ts
autosq-3/backend/partscentral-db/src/services/leadService.ts
autosq-3/backend/partscentral-db/src/routes/leadRoutes.ts

also find lead home page for displaying at : partscentral-dashboard/app/leads/page.tsx
find schema for creating table at : autosq-3/backend/partscentral-db/prisma/schema.prisma
check partscentral-dashboard/utils/socket.ts


for any other requireemnt always create a new file .



