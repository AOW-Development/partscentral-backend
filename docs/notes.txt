Out of stock 
add filter "refurbished" on product (reduce space betn table and top product info)



data fields are 
Maker
Model
 



NA data in db - show "Part Request" and "call now " button --> leads to ----> "contact form"
show "cart added"  without making screen blur and non-interactive (pop should close on any mouse event / should not close if im hovering on it)
added header delay ,  

show "pa"




Product table :

id 
make ex: ford
model  - here multiple ex 500
part : multiple part engine ,transmissio, 
sub-part : multiple subpart
inStock : boolean
description 
actualprice : 
discountedPrice : 
img_url
status
miles
Availability


Also there is going be realtiponship so ??

description :

mke 
model 
year
part
miles
Genuine
condition
warrantya





there are filters as well like , used , new , refurbushed , 

Inventory :

product_id
email
quantity_in_stock
reorder_level


customer :

id
email
password_hash
full_name
created_at
updated_at


product :

id


Dynmo db - nosql
rds - sql 
aurora :  sql 
lightsail mysql : this is not managed db right?? 

should i use managed db like top 3 mentioned here.

so which one is simple to use here and . 
would i need ORM in all of that ?? or which one is easy to use here and i dont need to write ORM , or kind of managed ORM ??
why not use DynmoDB i know it is doc. store but would it work here , or i should i go for sql db like rds or aurora ??


also if i go for sql which one i choose aurora or rds ??

-----------------------------------------------------------------------
what is prisma orm ??

is this workig 

  curl "http://localhost:3001/api/products?make=Ford&model=Raptor&year=1996&part=Engine"
  curl "http://localhost:3001/api/products"

   npx ts-node src/import-data.ts
  738  npx ts-node src/server.ts
  npx prisma generate
   npx ts-node src/import-data.ts

   npx prisma generate
  666  npx prisma migrate dev --name add-uniques
  667  npm install --save-dev @types/connect
  tsc
node dist/server.js

npx nodemon src/server.ts  === start server


# generate prism migration 
npx prisma migrate dev --name init

# create db without migration history and push schema
npx prisma db push

# remove trailing space 



intern777@DESKTOP-AEOD4OS:~$ curl "http://localhost:3001/api/products/grouped-with-subparts?make=Ford&model=Explorer&year=2004&part=Engine" -H "Accept: application/json" | jq
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   634  100   634    0     0   8174      0 --:--:-- --:--:-- --:--:--  8453
{
  "make": "Ford",
  "model": "Explorer",
  "year": "2004",
  "part": "Engine",
  "subParts": [
    {
      "id": 736,
      "name": "4.6L (VIN W, 8th digit)",
      "partTypeId": 1
    },
    {
      "id": 747,
      "name": "4.0L (SOHC), VIN E (8th digit), Sport Trac, 4x2",
      "partTypeId": 1
    },
    {
      "id": 748,
      "name": "4.0L (SOHC), VIN E (8th digit), Sport Trac, 4x4",
      "partTypeId": 1
    },
    {
      "id": 749,
      "name": "4.0L (SOHC), VIN E (8th digit), exc. Sport Trac",
      "partTypeId": 1
    },
    {
      "id": 750,
      "name": "4.0L (SOHC), VIN K (8th digit), Sport Trac, 4x2",
      "partTypeId": 1
    },
    {
      "id": 751,
      "name": "4.0L (SOHC), VIN K (8th digit), Sport Trac, 4x4",
      "partTypeId": 1
    },
    {
      "id": 752,
      "name": "4.0L (SOHC), VIN K (8th digit), exc. Sport Trac",
      "partTypeId": 1
    }
  ]
}

So here lets sey i click on single product . takes to /product/engines so here replace :

laod options from all subpart - names of response .
 NAME ENGINE ASSEMBLY = make model year
Option: 4.9L | from 2/3/91 (AIR inner manifold) | E4OD transmission  === subPart name of that product .

load in Description table from response : 
make 
model
year
part = make model year part 


so how would you do thsi here . would you make a new request by sku id of product when clicked on product card


  999  clear
 1000  curl "http://localhost:3001/api/products?make=Ford&model=Aerostar&year=1990&part=Engine" -H "Accept: application/json" | jq
 1001  curl "http://localhost:3001/api/products"
 1002  curl "http://localhost:3001/api/products?make=Ford&model=Aerostar&year=1990&part=Engine" -H "Accept: application/json" | jq
 1003  curl "http://localhost:3001/api/products?make=Ford&model=contour&year=1999&part=Engine" -H "Accept: application/json" | jq
 1004  clear
 1005  curl "http://localhost:3001/api/products/with-subparts?make=Ford&model=Contour&year=1999&part=Engine" -H "Accept: application/json" | jq
 1006  curl "http://localhost:3001/api/products/grouped-with-subparts?make=Ford&model=Contour&year=1999&part=Engine" -H "Accept: application/json" | jq
 1007  curl "http://localhost:3001/api/products/grouped-with-subparts?make=Ford&model=Explorer&year=2004&part=Engine" -H "Accept: application/json" | jq
 1008  curl "http://localhost:3001/api/products/with-subparts?make=Ford&model=Contour&year=1999&part=Engine" -H "Accept: application/json" | jq
 1009  curl "http://localhost:3001/api/products/with-subparts?make=Ford&model=Aerostar&year=1990&part=Engine" -H "Accept: application/json" | jq
 1010  curl "http://localhost:3001/api/products/with-subparts?make=Ford&model=Contour&year=1999&part=Engine" -H "Accept: application/json" | jq
 1011  curl "http://localhost:3001/api/products/with-subparts?make=Ford&model=F-150&year=2002&part=Engine" -H "Accept: application/json" | jq
 1012  curl "http://localhost:3001/api/products/grouped-with-subparts?make=Ford&model=Explorer&year=2004&part=Engine" -H "Accept: application/json" | jq
 1013  curl "http://localhost:3001/api/products/with-subparts?make=Ford&model=Contour&year=1999&part=Engine" -H "Accept: application/json" | jq
 1014  history


npx ts-node src/server.ts
curl "http://localhost:3001/api/products/years?make=Ford&model=Aerostar"


There is something wrong with column "inStock" it is setting false here : intern777@DESKTOP-AEOD4OS:~$ curl "http://localhost:3001/api/products/with-subparts?make=Ford&model=500&year=2005&part=transmission" -H "Accept: application/
json" | jq
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  1835  100  1835    0     0  48955      0 --:--:-- --:--:-- --:--:-- 50972
[
  {
    "id": 2726,
    "sku": "FORD-500-2005-TRANSMISSION-AT,(3.0L),6SPEED(TRANSCODEBONCERTIFICATIONLABEL)",
    "modelYearId": 1,
    "partTypeId": 2,
    "inStock": false,
    "description": null,
    "actualprice": 1680,
    "discountedPrice": 1530,
    "status": null,
    "miles": "80k",
    "Availability": null,
    "warranty": null,
    "categoryId": null,
    "images": [],
    "inventory": null,
    "subParts": [
      {
        "id": 1273,
        "name": "AT, (3.0L), 6 speed (trans code B on certification label)",
        "partTypeId": 2
      }
    ],
    "modelYear": {
      "id": 1,
      "modelId": 1,
      "yearId": 1,
      "model": {
        "id": 1,
        "name": "500",
        "makeId": 1,
        "make": {
          "id": 1,
          "name": "Ford"
        }
      },
      "year": {
        "id": 1,
        "value": "2005"
      }
    },
    "partType": {
      "id": 2,
      "name": "Transmission"
    }
  },
  {
    "id": 2727,
    "sku": "FORD-500-2005-TRANSMISSION-AT,(3.0L),CVT(TRANSCODEAONCERTIFICATIONLABEL),AWD",
    "modelYearId": 1,
    "partTypeId": 2,
    "inStock": false,
    "description": null,
    "actualprice": 2610,
    "discountedPrice": 2460,
    "status": null,
    "miles": "70k",
    "Availability": null,
    "warranty": null,
    "categoryId": null,
    "images": [],
    "inventory": null,
    "subParts": [
      {
        "id": 1274,
        "name": "AT, (3.0L), CVT (trans code A on certification label), AWD",
        "partTypeId": 2
      }
    ],
    "modelYear": {
      "id": 1,
      "modelId": 1,
      "yearId": 1,
      "model": {
        "id": 1,
        "name": "500",
        "makeId": 1,
        "make": {
          "id": 1,
          "name": "Ford"
        }
      },
      "year": {
        "id": 1,
        "value": "2005"
      }
    },
    "partType": {
      "id": 2,
      "name": "Transmission"
    }
  },
  {
    "id": 2728,
    "sku": "FORD-500-2005-TRANSMISSION-AT,(3.0L),CVT(TRANSCODEAONCERTIFICATIONLABEL),FWD",
    "modelYearId": 1,
    "partTypeId": 2,
    "inStock": false,
    "description": null,
    "actualprice": 2025,
    "discountedPrice": 1875,
    "status": null,
    "miles": "70k",
    "Availability": null,
    "warranty": null,
    "categoryId": null,
    "images": [],
    "inventory": null,
    "subParts": [
      {
        "id": 1275,
        "name": "AT, (3.0L), CVT (trans code A on certification label), FWD",
        "partTypeId": 2
      }
    ],
    "modelYear": {
      "id": 1,
      "modelId": 1,
      "yearId": 1,
      "model": {
        "id": 1,
        "name": "500",
        "makeId": 1,
        "make": {
          "id": 1,
          "name": "Ford"
        }
      },
      "year": {
        "id": 1,
        "value": "2005"
      }
    },
    "partType": {
      "id": 2,
      "name": "Transmission"
    }
  }
]
intern777@DESKTOP-AEOD4OS:~$ But as you can see in excel sheeet img inStack is suppose to be true .??

-------------------------------

add otp option in registration

-----------------
Implement Oauth
Implement middleware
Implement Search 
Implement recently viewed
Implement added cart popUp
Deploy
added all form validation
Implement cart dynamic logic
Implement product flow added to cart-->popUp-->product shows in cart-->


-------------------------------------
implement Oauth :

authentication
impemetn session managemnet 


Implement Oauth for signin signup . would you use "next-auth" for this .
also to manage this how would you use middleware for auth logic, also session-managemnet to manage-session also cookies to store data.
would you be writing this be frontend side or backend side.
secure client side pages here.which pages will you be securing here: payment cart profile 
here 2 ways to authenticate user :
1) using email+password aftether otp conformation.
2) using Oatuh where user can logIn using google and store jwt in mysql db which already integrated just need to create table in prisma schema file (also for this what table needs to created in db)

protect api routes.
implement logout mechanism .

---------------------------------------------------------------------


autosq     

route.ts
provider
prisma

api.ts



database
3 table - customer ,account ,session

authController
authMiddleware
prisma.ts

----------------------------------------
 cors ?? 
  