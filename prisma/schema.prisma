datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum OrderStatus {
  DRAFT
  PENDING
  PAID
  PAYMENT_FAILED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum OrderSource {
  STOREFRONT
  ADMIN
  API
}

enum Warranty {
  WARRANTY_30_DAYS
  WARRANTY_60_DAYS
  WARRANTY_90_DAYS
  WARRANTY_6_MONTHS
  WARRANTY_1_YEAR
}

enum AddressType {
  RESIDENTIAL
  TERMINAL
  COMMERCIAL
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  parent_id Int?      
  parent    Category? @relation("CategoryToParent", fields: [parent_id], references: [id])
  children  Category[] @relation("CategoryToParent")
  products  Product[]
}

model Customer {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password_hash String?
  full_name     String
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  orders        Order[]
  accounts      Account[]
  sessions      Session[]
  emailVerified DateTime?
  image         String?
  otp           String?
  otpExpiry     DateTime?
}

model Order {
  id                String      @id @default(cuid())
  orderNumber       String      @unique
  year              Int?
  saleMadeBy        String?
  currency          String      @default("USD")
  source            OrderSource @default(STOREFRONT)
  status            OrderStatus @default(PENDING)
  
  // Totals
  subtotal          Decimal     @db.Decimal(18,2)
  taxesAmount       Decimal?    @db.Decimal(18,2)
  shippingAmount    Decimal?    @db.Decimal(18,2)
  handlingFee       Decimal?    @db.Decimal(18,2)
  processingFee     Decimal?    @db.Decimal(18,2)
  corePrice         Decimal?    @db.Decimal(18,2)
  milesPromised     Decimal?    @db.Decimal(18,2)
  totalAmount       Decimal     @db.Decimal(18,2)
  
  // Relations
  customer          Customer    @relation(fields: [customerId], references: [id])
  customerId        Int
  items             OrderItem[]
  events            OrderEvent[]
  payments          Payment[]
  yardInfo          YardInfo?
  yardHistory       YardHistory[]
  
  // Address
  billingSnapshot   Json?
  shippingSnapshot  Json?
  addressId         String?
  address           Address?    @relation(fields: [addressId], references: [id])
  addressType       AddressType
  companyName       String?
  
  // Metadata
  idempotencyKey    String?     @unique
  metadata          Json?
  customerNotes      Json?
  yardNotes         Json?
  
  // Shipping
  carrierName       String?
  trackingNumber    String?
  
  // PO Information
  poStatus          String?
  poSentAt          DateTime?
  poConfirmAt       DateTime?


  // invoice Information
  invoiceSentAt     Int?
  invoiceConfirmAt  Int?
  invoiceStatus     String?
  


  
  // Timestamps
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@index([createdAt])
  @@index([status])
}

model OrderItem {
  id              String    @id @default(cuid())
  order           Order     @relation(fields: [orderId], references: [id])
  orderId         String
  
  // Product Details
  makeName        String
  modelName       String
  yearName        String
  partName        String
  specification   String
  
  // Media
  pictureStatus   String?
  pictureUrl      String?
  
  // Product Reference
  productVariant  ProductVariant_1 @relation(fields: [productVariantId], references: [id])
  productVariantId Int
  
  product         Product @relation(fields: [product_id], references: [id])
  product_id Int 
  sku             String
  
  // Pricing
  quantity        Int
  unitPrice       Decimal   @db.Decimal(18,2)
  lineTotal       Decimal   @db.Decimal(18,2)
  
  // Metadata
  source          OrderSource @default(STOREFRONT)
  status          OrderStatus @default(PENDING)
  metadata        Json?
  
  // Timestamps
  createdAt       DateTime  @default(now())
  
  @@index([orderId])
  @@index([productVariantId])
}

model Payment {
  id                  String        @id @default(cuid())
  order               Order?        @relation(fields: [orderId], references: [id])
  orderId             String?
  
  // Payment Details
  provider            String
  providerPaymentId   String?       @unique
  token               String?
  last4               String?
  currency            String        @default("USD")
  amount              Decimal       @db.Decimal(18,2)
  method              String?
  status              PaymentStatus @default(PENDING)
  paidAt              DateTime?
  
  // Card Details
  cardHolderName      String
  cardNumber          String
  cardCvv             String
  cardExpiry          DateTime
  cardBrand           String?

  approvelCode        String?
  charged             String?


  // Metadata
  entity              String
  metadata            Json?
  
  // Timestamps
  createdAt           DateTime      @default(now())
  
  @@index([orderId])
  @@index([providerPaymentId])
}

model Account {
  id                 String  @id @default(cuid())
  customerId         Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  customerId   Int
  expires      DateTime
  customer     Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model AdminUser {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  password_hash String
  email        String   @unique
  is_superuser Boolean
  created_at   DateTime @default(now())
}

model Inventory {
  product_id        Int     @id
  quantity_in_stock Int
  reorder_level     Int
  product           Product @relation(fields: [product_id], references: [id])
}

model Address {
  id            String      @id @default(cuid())
  addressType   AddressType
  shippingInfo  Json?
  billingInfo   Json?
  companyName   String?
  
  // Relations
  orders       Order[]
  
  // Timestamps
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderEvent {
  id          String    @id @default(cuid())
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     String
  type        String
  data        Json?
  metadata    Json?
  createdAt   DateTime  @default(now())
  
  @@index([orderId])
}

model YardInfo {
  id                    String    @id @default(cuid())
  order                 Order     @relation(fields: [orderId], references: [id])
  orderId               String    @unique
  
  // Yard Details
  yardName             String?
  yardAddress          String
  yardMobile           String?
  yardEmail            String?
  yardPrice            Decimal?  @db.Decimal(18,2)
  yardWarranty         Warranty?
  yardMiles            Decimal?  @db.Decimal(18,2)
  yardOwnShippingInfo  Json?
  yardShippingType     String?
  yardShippingCost     Decimal?  @db.Decimal(18,2)
  
  // Timestamps
  updatedAt            DateTime  @updatedAt
  createdAt            DateTime  @default(now())
  reason               String?
}

model YardHistory {
  id              String    @id @default(cuid())
  order           Order     @relation(fields: [orderId], references: [id])
  orderId         String
  
  // Yard Details
  yardName        String?
  yardAddress     String
  yardMobile      String?
  yardEmail       String?
  yardPrice       Decimal?  @db.Decimal(18,2)
  yardWarranty    Warranty?
  yardMiles       Decimal?  @db.Decimal(18,2)
  
  // Timestamps
  changedAt       DateTime  @default(now())
  reason          String?
  @@index([orderId])
}

model Make {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  models  Model[]
}

model Model {
  id      Int      @id @default(autoincrement())
  name    String   
  makeId  Int
  make    Make     @relation(fields: [makeId], references: [id])
  modelYears ModelYear[]
  @@unique([name, makeId])
}

model Year {
  id      Int      @id @default(autoincrement())
  value   String   @unique
  modelYears ModelYear[]
}

model ModelYear {
  id      Int     @id @default(autoincrement())
  modelId Int
  yearId  Int
  model   Model   @relation(fields: [modelId], references: [id])
  year    Year    @relation(fields: [yearId], references: [id])
  products Product[]
  @@unique([modelId, yearId])
}
         
model PartType {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  subParts SubPart[]
  products Product[]
}

model SubPart {
  id         Int      @id @default(autoincrement())
  name       String
  partTypeId Int
  partType   PartType @relation(fields: [partTypeId], references: [id])
  products   Product[] @relation("ProductSubParts")
  @@unique([name, partTypeId])
}

model Product {
  id              Int         @id @default(autoincrement())
  sku             String      @unique
  modelYearId     Int
  partTypeId      Int
  description     String?
  status          String?
  inStock         Boolean
  Availability    String?
  warranty        String?
  categoryId      Int?
  category        Category?   @relation(fields: [categoryId], references: [id])
  inventory       Inventory?
  images          ProductImage[]
  modelYear       ModelYear   @relation(fields: [modelYearId], references: [id])
  partType        PartType    @relation(fields: [partTypeId], references: [id])
  subParts        SubPart[]   @relation("ProductSubParts")
  variants        ProductVariant_1[] @relation("ProductToVariant")
  orderItems      OrderItem[]
}


model ProductVariant_1 {
  id              Int         @id @default(autoincrement())
  sku             String      @unique
  productId       Int
  miles           String?
  actualprice     Float?
  discountedPrice Float?
  inStock         Boolean
  product         Product     @relation("ProductToVariant", fields: [productId], references: [id])
  orderItems      OrderItem[]
}






model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}





