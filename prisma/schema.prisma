datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  parent_id Int?      
  parent    Category? @relation("CategoryToParent", fields: [parent_id], references: [id])
  children  Category[] @relation("CategoryToParent")
  products  Product[]
}

model Customer {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password_hash String?
  full_name     String
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  orders        Order[]
  accounts      Account[]
  sessions      Session[]
  emailVerified DateTime?
  image         String?
  otp           String?
  otpExpiry     DateTime?
}

model Order {
  id            Int        @id @default(autoincrement())
  customer_id   Int
  total_amount  Float
  status        String
  created_at    DateTime   @default(now())
  customer      Customer   @relation(fields: [customer_id], references: [id])
  items         OrderItem[]
  payment       Payment?
}

model OrderItem {
  order_id   Int
  product_id Int
  quantity   Int

  order      Order   @relation(fields: [order_id], references: [id])
  product    Product @relation(fields: [product_id], references: [id])

  @@id([order_id, product_id])
}

model Payment {
  id        Int      @id @default(autoincrement())
  order_id  Int      @unique
  amount    Float
  method    String
  status    String
  paid_at   DateTime?
  order     Order    @relation(fields: [order_id], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  customerId         Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  customerId   Int
  expires      DateTime
  customer     Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model AdminUser {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  password_hash String
  email        String   @unique
  is_superuser Boolean
  created_at   DateTime @default(now())
}

model Inventory {
  product_id        Int   @id
  quantity_in_stock Int
  reorder_level     Int
  product           Product @relation(fields: [product_id], references: [id])
}

model Make {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  models  Model[]
}

model Model {
  id      Int      @id @default(autoincrement())
  name    String   
  makeId  Int
  make    Make     @relation(fields: [makeId], references: [id])
  modelYears ModelYear[]
  @@unique([name, makeId])
}

model Year {
  id      Int      @id @default(autoincrement())
  value   String   @unique
  modelYears ModelYear[]
}

model ModelYear {
  id      Int     @id @default(autoincrement())
  modelId Int
  yearId  Int
  model   Model   @relation(fields: [modelId], references: [id])
  year    Year    @relation(fields: [yearId], references: [id])
  products Product[]
  @@unique([modelId, yearId])
}

model PartType {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  subParts SubPart[]
  products Product[]
}

model SubPart {
  id         Int      @id @default(autoincrement())
  name       String
  partTypeId Int
  partType   PartType @relation(fields: [partTypeId], references: [id])
  products   Product[] @relation("ProductSubParts")
  @@unique([name, partTypeId])
}

model Product {
  id              Int         @id @default(autoincrement())
  sku             String      @unique
  modelYearId     Int
  partTypeId      Int
  description     String?
  status          String?
  inStock         Boolean
  Availability    String?
  warranty        String?
  categoryId      Int?
  category        Category?   @relation(fields: [categoryId], references: [id])
  orderItems      OrderItem[]
  inventory       Inventory?
  images          ProductImage[]
  modelYear       ModelYear   @relation(fields: [modelYearId], references: [id])
  partType        PartType    @relation(fields: [partTypeId], references: [id])
  subParts        SubPart[]   @relation("ProductSubParts")
  variants        ProductVariant_1[] @relation("ProductToVariant")
}


model ProductVariant_1 {
  id              Int         @id @default(autoincrement())
  sku             String      @unique
  productId       Int
  miles           String?
  actualprice     Float?
  discountedPrice Float?
  inStock         Boolean
  product         Product     @relation("ProductToVariant", fields: [productId], references: [id])
}






model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}





